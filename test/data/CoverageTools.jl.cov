        - #######################################################################
        6 # This file is not the result of a real test execution, but is used as
        - # comparison input during tests of '*.cov' input and against
        7 # the tracefile 'expected.info' to verify LCOV.readfile/LCOV.writefile
        - #######################################################################
        - module CoverageTools
        -
        -     import JuliaParser.Parser
        -
        -     # process_cov
        -     # Given a .cov file, return the counts for each line, where the
        -     # lines that can't be counted are denoted with a -1
        -     export process_cov, amend_coverage_from_src!, coverage_file, coverage_folder, analyze_malloc
        -     function process_cov(filename)
        8         if !isfile(filename)
        3             srcname, ext = splitext(filename)
        3             lines = open(srcname) do fp
        3                 readlines(fp)
        -             end
        3             coverage = Array(Union(Nothing,Int), length(lines))
        3             return fill!(coverage, nothing)
        -         end
        5         fp = open(filename, "r")
        5         lines = readlines(fp)
        5         num_lines = length(lines)
        5         coverage = Array(Union(Nothing,Int), num_lines)
        5         for i = 1:num_lines
      570             cov_segment = lines[i][1:9]
      570             coverage[i] = cov_segment[9] == '-' ? nothing : int(cov_segment)
        -         end
        5         close(fp)
        5         return coverage
        -     end
        -     function amend_coverage_from_src!(coverage, srcname)
        -         # To make sure things stay in sync, parse the file position corresonding to each new line
        8         linepos = Int[]
        8         open(srcname) do io
        8             while !eof(io)
      753                 push!(linepos, position(io))
      753                 readline(io)
        -             end
        8             push!(linepos, position(io))
        -         end
        8         open(srcname) do io
        8             while !eof(io)
       38                 pos = position(io)
       38                 linestart = minimum(searchsorted(linepos, pos))
       38                 ast = Parser.parse(io)
       35                 isa(ast, Expr) || continue
       24                 flines = function_body_lines(ast)
       24                 if !isempty(flines)
       17                     flines += linestart-1
       17                     for l in flines
       44                         if coverage[l] == nothing
       18                             coverage[l] = 0
        -                         end
        -                     end
        -                 end
        -             end
        -         end
        5         coverage
        -     end
        -     function coverage_file(filename)
        1         results = Coveralls.process_file(filename)
        1         coverage = results["coverage"]
       25         tot = sum(x->x!=nothing, coverage)
       25         covered = sum(x->x!=nothing && x>0, coverage)
        1         covered, tot
        -     end
        -     function coverage_folder(folder="src")
        1         results = Coveralls.process_folder(folder)
        1         tot = covered = 0
        1         for item in results
        2             coverage = item["coverage"]
      275             tot += sum(x->x!=nothing, coverage)
      275             covered += sum(x->x!=nothing && x>0, coverage)
        -         end
        1         covered, tot
        -     end
        -
       24     function_body_lines(ast) = function_body_lines!(Int[], ast, false)
      339     function_body_lines!(flines, arg, infunction) = flines
        -     function function_body_lines!(flines, node::LineNumberNode, infunction)
       46         line = node.line
       46         if infunction
       18             push!(flines, line)
        -         end
       46         flines
        -     end
        -     function function_body_lines!(flines, ast::Expr, infunction)
      332         if ast.head == :line
       32             line = ast.args[1]
       32             if infunction
       26                 push!(flines, line)
        -             end
       32             return flines
        -         end
      300         infunction |= Base.Cartesian.isfuncexpr(ast)
      300         for arg in ast.args
      693             flines = function_body_lines!(flines, arg, infunction)
        -         end
      300         flines
        -     end
        -
        -     export Coveralls
        -     module Coveralls
        -         using Requests
        -         using CoverageTools
        -         using JSON
        -
        -         # coveralls_process_file
        -         # Given a .jl file, return the Coveralls.io dictionary for this
        -         # file by reading in the file and its matching .cov. Don't convert
        -         # to JSON yet, just return dictionary.
        -         # https://coveralls.io/docs/api
        -         # {
        -         #   "name" : "$filename"
        -         #   "source": "...\n....\n...."
        -         #   "coverage": [null, 1, null]
        -         # }
        -         export process_file
        -         function process_file(filename)
        8             return @compat Dict("name" => filename,
        -                     "source" => readall(filename),
        -                     "coverage" => amend_coverage_from_src!(process_cov(filename*".cov"), filename))
        -         end
        -
        -         # coveralls_process_src
        -         # Recursively walk through a Julia package's src/ folder
        -         # and collect coverage statistics
        -         export process_folder
        -         function process_folder(folder="src")
        1             source_files=Any[]
        1             filelist = readdir(folder)
        1             for file in filelist
        5                 fullfile = joinpath(folder,file)
        5                 println(fullfile)
        5                 if isfile(fullfile)
        5                     try
        5                         new_sf = process_file(fullfile)
        2                         push!(source_files, new_sf)
        -                     catch e
        - #                         if !isa(e,SystemError)
        - #                             rethrow(e)
        - #                         end
        -                         # Skip
        3                         println("Skipped $fullfile")
        -                     end
        0                 else isdir(fullfile)
        0                     append!(source_files, process_folder(fullfile))
        -                 end
        -             end
        1             return source_files
        -         end
        -
        -         # submit
        -         # Submit coverage to Coveralls.io
        -         # https://coveralls.io/docs/api
        -         # {
        -         #   "service_job_id": "1234567890",
        -         #   "service_name": "travis-ci",
        -         #   "source_files": [
        -         #     {
        -         #       "name": "example.rb",
        -         #       "source": "def four\n  4\nend",
        -         #       "coverage": [null, 1, null]
        -         #     },
        -         #     {
        -         #       "name": "lib/two.rb",
        -         #       "source": "def seven\n  eight\n  nine\nend",
        -         #       "coverage": [null, 1, 0, null]
        -         #     }
        -         #   ]
        -         # }
        -         export submit, submit_token
        -         function submit(source_files)
        -             data = @compat Dict("service_job_id" => ENV["TRAVIS_JOB_ID"],
        -                     "service_name" => "travis-ci",
        -                     "source_files" => source_files)
        -             r = Requests.post(URI("https://coveralls.io/api/v1/jobs"), files =
        -                 [FileParam(JSON.json(data),"application/json","json_file","coverage.json")])
        -             dump(r.data)
        -         end
        -
        -         function submit_token(source_files)
        -             data = @compat Dict("repo_token" => ENV["REPO_TOKEN"],
        -                     "source_files" => source_files)
        -             r = post(URI("https://coveralls.io/api/v1/jobs"), files =
        -                 [FileParam(JSON.json(data),"application/json","json_file","coverage.json")])
        -             dump(r.data)
        -         end
        -     end  # module Coveralls
        -
        -
        -     ## Analyzing memory allocation
        -     immutable MallocInfo
        -         bytes::Int
        -         filename::UTF8String
        -         linenumber::Int
        -     end
        -
      547     sortbybytes(a::MallocInfo, b::MallocInfo) = a.bytes < b.bytes
        -
        -     function analyze_malloc_files(files)
        2         bc = MallocInfo[]
        2         for filename in files
        1             open(filename) do file
        1                 for (i,ln) in enumerate(eachline(file))
      249                     tln = strip(ln)
      249                     if !isempty(tln) && isdigit(tln[1])
       79                         s = split(tln)
       79                         b = parseint(s[1])
       79                         push!(bc, MallocInfo(b, filename, i))
        -                     end
        -                 end
        -             end
        -         end
        2         sort(bc, lt=sortbybytes)
        -     end
        -
        -     function find_malloc_files(dirs)
        1         files = ByteString[]
        1         for dir in dirs
        1             filelist = readdir(dir)
        1             for file in filelist
        5                 file = joinpath(dir, file)
        5                 if isdir(file)
        0                     append!(files, find_malloc_files(file))
        5                 elseif endswith(file, "jl.mem")
        1                     push!(files, file)
        -                 end
        -             end
        -         end
        1         files
        -     end
        -     find_malloc_files(file::ByteString) = find_malloc_files([file])
        -
        1     analyze_malloc(dirs) = analyze_malloc_files(find_malloc_files(dirs))
        1     analyze_malloc(dir::ByteString) = analyze_malloc([dir])
        -
        -     # Support Unix command line usage like `julia CoverageTools.jl $(find ~/.julia/v0.3 -name "*.jl.mem")`
        -     if !isinteractive()
        -         bc = analyze_malloc_files(ARGS)
        -         println(bc)
        -     end
        - end
        -
